

library(gdata)
library(readxl)
library(survival)
library(mgcv)
library(nlme)
library(R2HTML)
library(gss)
library(codetools)
library(STAR)
library(openxlsx)
library(gtools)
library(openxlsx)
library(plyr)
library(readr) 

###############################################################################################################
#RUN FUNCTIONS
###############################################################################################################
cbind.na <- function (..., deparse.level = 1) 
{
  na <- nargs() - (!missing(deparse.level))    
  deparse.level <- as.integer(deparse.level)
  stopifnot(0 <= deparse.level, deparse.level <= 2)
  argl <- list(...)   
  while (na > 0 && is.null(argl[[na]])) {
    argl <- argl[-na]
    na <- na - 1
  }
  if (na == 0) 
    return(NULL)
  if (na == 1) {         
    if (isS4(..1)) 
      return(cbind2(..1))
    else return(matrix(...))  ##.Internal(cbind(deparse.level, ...)))
  }
  if (deparse.level) {       
    symarg <- as.list(sys.call()[-1L])[1L:na]
    Nms <- function(i) {
      if (is.null(r <- names(symarg[i])) || r == "") {
        if (is.symbol(r <- symarg[[i]]) || deparse.level == 
            2) 
          deparse(r)
      }
      else r
    }
  }   
  ## deactivated, otherwise no fill in with two arguments
  if (na == 0) {
    r <- argl[[2]]
    fix.na <- FALSE
  }
  else {
    nrs <- unname(lapply(argl, nrow))
    iV <- sapply(nrs, is.null)
    fix.na <- identical(nrs[(na - 1):na], list(NULL, NULL))
    ## deactivated, otherwise data will be recycled
    #if (fix.na) {
    #    nr <- max(if (all(iV)) sapply(argl, length) else unlist(nrs[!iV]))
    #    argl[[na]] <- cbind(rep(argl[[na]], length.out = nr), 
    #        deparse.level = 0)
    #}       
    if (deparse.level) {
      if (fix.na) 
        fix.na <- !is.null(Nna <- Nms(na))
      if (!is.null(nmi <- names(argl))) 
        iV <- iV & (nmi == "")
      ii <- if (fix.na) 
        2:(na - 1)
      else 2:na
      if (any(iV[ii])) {
        for (i in ii[iV[ii]]) if (!is.null(nmi <- Nms(i))) 
          names(argl)[i] <- nmi
      }
    }
    
    ## filling with NA's to maximum occuring nrows
    nRow <- as.numeric(sapply(argl, function(x) NROW(x)))
    maxRow <- max(nRow, na.rm = TRUE)  
    argl <- lapply(argl, function(x)  if (is.null(nrow(x))) c(x, rep(NA, maxRow - length(x)))
                   else rbind.na(x, matrix(, maxRow - nrow(x), ncol(x))))
    r <- do.call(cbind, c(argl[-1L], list(deparse.level = deparse.level)))
  }
  d2 <- dim(r)
  r <- cbind2(argl[[1]], r)
  if (deparse.level == 0) 
    return(r)
  ism1 <- !is.null(d1 <- dim(..1)) && length(d1) == 2L
  ism2 <- !is.null(d2) && length(d2) == 2L && !fix.na
  if (ism1 && ism2) 
    return(r)
  Ncol <- function(x) {
    d <- dim(x)
    if (length(d) == 2L) 
      d[2L]
    else as.integer(length(x) > 0L)
  }
  nn1 <- !is.null(N1 <- if ((l1 <- Ncol(..1)) && !ism1) Nms(1))
  nn2 <- !is.null(N2 <- if (na == 2 && Ncol(..2) && !ism2) Nms(2))
  if (nn1 || nn2 || fix.na) {
    if (is.null(colnames(r))) 
      colnames(r) <- rep.int("", ncol(r))
    setN <- function(i, nams) colnames(r)[i] <<- if (is.null(nams)) 
      ""
    else nams
    if (nn1) 
      setN(1, N1)
    if (nn2) 
      setN(1 + l1, N2)
    if (fix.na) 
      setN(ncol(r), Nna)
  }
  r
}

rbind.na <- function (..., deparse.level = 1) 
{
  na <- nargs() - (!missing(deparse.level))
  deparse.level <- as.integer(deparse.level)
  stopifnot(0 <= deparse.level, deparse.level <= 2)
  argl <- list(...)
  while (na > 0 && is.null(argl[[na]])) {
    argl <- argl[-na]
    na <- na - 1
  }    
  if (na == 0) 
    return(NULL)
  if (na == 1) {
    if (isS4(..1)) 
      return(rbind2(..1))
    else return(matrix(..., nrow = 1)) ##.Internal(rbind(deparse.level, ...)))
  }
  if (deparse.level) {
    symarg <- as.list(sys.call()[-1L])[1L:na]
    Nms <- function(i) {
      if (is.null(r <- names(symarg[i])) || r == "") {
        if (is.symbol(r <- symarg[[i]]) || deparse.level == 
            2) 
          deparse(r)
      }
      else r
    }
  }
  
  ## deactivated, otherwise no fill in with two arguments
  if (na == 0) {
    r <- argl[[2]]
    fix.na <- FALSE
  }
  else {
    nrs <- unname(lapply(argl, ncol))
    iV <- sapply(nrs, is.null)
    fix.na <- identical(nrs[(na - 1):na], list(NULL, NULL))
    ## deactivated, otherwise data will be recycled
    #if (fix.na) {
    #    nr <- max(if (all(iV)) sapply(argl, length) else unlist(nrs[!iV]))
    #    argl[[na]] <- rbind(rep(argl[[na]], length.out = nr), 
    #        deparse.level = 0)
    #}
    if (deparse.level) {
      if (fix.na) 
        fix.na <- !is.null(Nna <- Nms(na))
      if (!is.null(nmi <- names(argl))) 
        iV <- iV & (nmi == "")
      ii <- if (fix.na) 
        2:(na - 1)
      else 2:na
      if (any(iV[ii])) {
        for (i in ii[iV[ii]]) if (!is.null(nmi <- Nms(i))) 
          names(argl)[i] <- nmi
      }
    }
    
    ## filling with NA's to maximum occuring ncols
    nCol <- as.numeric(sapply(argl, function(x) if (is.null(ncol(x))) length(x)
                              else ncol(x)))
    maxCol <- max(nCol, na.rm = TRUE)  
    argl <- lapply(argl, function(x)  if (is.null(ncol(x))) c(x, rep(NA, maxCol - length(x)))
                   else cbind(x, matrix(, nrow(x), maxCol - ncol(x))))  
    
    ## create a common name vector from the
    ## column names of all 'argl' items
    namesVEC <- rep(NA, maxCol)  
    for (i in 1:length(argl)) {
      CN <- colnames(argl[[i]])          
      m <- !(CN %in% namesVEC)
      namesVEC[m] <- CN[m]          
    }  
    
    ## make all column names from common 'namesVEC'
    for (j in 1:length(argl)) {    
      if (!is.null(ncol(argl[[j]]))) colnames(argl[[j]]) <- namesVEC
    }
    
    r <- do.call(rbind, c(argl[-1L], list(deparse.level = deparse.level)))        
  }
  
  d2 <- dim(r)
  
  ## make all column names from common 'namesVEC'
  colnames(r) <- colnames(argl[[1]])
  
  r <- rbind2(argl[[1]], r)
  
  if (deparse.level == 0) 
    return(r)
  ism1 <- !is.null(d1 <- dim(..1)) && length(d1) == 2L
  ism2 <- !is.null(d2) && length(d2) == 2L && !fix.na
  if (ism1 && ism2) 
    return(r)
  Nrow <- function(x) {
    d <- dim(x)
    if (length(d) == 2L) 
      d[1L]
    else as.integer(length(x) > 0L)
  }
  nn1 <- !is.null(N1 <- if ((l1 <- Nrow(..1)) && !ism1) Nms(1))
  nn2 <- !is.null(N2 <- if (na == 2 && Nrow(..2) && !ism2) Nms(2))
  if (nn1 || nn2 || fix.na) {
    if (is.null(rownames(r))) 
      rownames(r) <- rep.int("", nrow(r))
    setN <- function(i, nams) rownames(r)[i] <<- if (is.null(nams)) 
      ""
    else nams
    if (nn1) 
      setN(1, N1)
    if (nn2) 
      setN(1 + l1, N2)
    if (fix.na) 
      setN(nrow(r), Nna)
  }
  r
}



#dir='C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/'
#MOUSE
#r=1

dir='C:/Users/floresgarciarj/Documents/Juan Day 1/'
r=1

# load excel workbook
excel <- loadWorkbook(paste(dir,'P_TONE_CUE.xlsx',sep="")) # change to match your path
# get sheet names
sheet_names <- names(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorkbook(excel, .sheet)})
# limit sheet_list to sheets with at least 1 dimension 
sheet_list2 <- sheet_list[sapply(sheet_list, function(x) dim(x)[1]) > 0]

df1<-as.data.frame(sheet_list2[[1]])
col_names<-df1[1,3:19] #change
rownames<-seq(1:20)

list_of_cues<-list()
for (i in 1:length(sheet_list)){
  df1<-as.data.frame(sheet_list2[[i]])
  df1<-df1[,3:19] #change to 20
  df1<-df1[-(1:3),]
  df1<-df1[1:20,]
  # defining data in the vector 
  x<-as.numeric(as.matrix(df1))
  # creating matrix 
  length(x)
  m <- matrix(x, nrow = 20, byrow = FALSE,  
              dimnames = list(rownames, col_names)) 
  
  list_of_cues[[i]]<-m
}

list_of_shocks<-list()
for (i in 1:length(sheet_list)){
  df1<-as.data.frame(sheet_list2[[i]])
  df1<-df1[,3:19]#change to 20
  df1<-df1[-(1:3),]
  df1<-df1[1:20,]
  # defining data in the vector 
  x<-as.numeric(as.matrix(df1))
  # creating matrix 
  length(x)
  m <- matrix(x, nrow = 20, byrow = FALSE,  
              dimnames = list(rownames, col_names)) 
  m<-m+28
  list_of_shocks[[i]]<-m
}
#mouse_1-12
mydir = paste(dir,"MOuse_",r,sep="")      #******CHANGE BY ANIMAL**************###########

mydir = dir      #******CHANGE BY ANIMAL**************###########


####################folder containing your data###############################

myfiles = list.files(path=mydir, pattern="*.csv", full.names=TRUE)
myfiles<-mixedsort(myfiles)

dat<-list()
for(i in 1:length(myfiles)){
  dat_csv = ldply(myfiles[i], read_csv)
  dat[[i]]<-as.data.frame(dat_csv)
  dat[[i]]<-as.data.frame(cbind(dat[[i]][1], dat[[i]][2],dat[[i]][3], dat[[i]][4], dat[[i]][5])) #4 is in platform #5 off platform #1 is time
  colnames(dat[[i]])<-c("time","x_cord","y_cord","on platform","off platform")
  head(dat[[i]])
}

data_2999L<-(do.call(cbind.na, dat))  #******CHANGE BY ANIMAL**************###########

#for (i in (1:6)){
#  for (j in (1:16)){
#   for(k in (1:20)){
#     print(list_of_cues[[i]][k,j]) 
#    }
#  }
#}

vec_3<-c(0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64)#,68)
vec_4<-c(4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68)#72)

add1<-c(0,0,0)
add2<-c(0,0,0)
#create switch patterns 0 to 1 or 1 to 0
x <- c(0,1) #create vector x with sequence 0 1
l <- c(1,0) #create vector y with sequence 1 

trial_frame_2999L<-list() #list for trials all variables
all_days_by_trial_2999L<-list() #list for days 20 trials per day
results_list<-list() #list for position and times evaluation per trial
all_days_by_trial_2999L_summary<-list() #for all days 20 trials per day

shock_frames_trial<-list()
all_days_by_trial_shocks<-list()

shock_outcome_list<-list()
all_days_so_list<-list()
all_days_shock_frames_list<-list()

cue_frames<-list()
all_days_cue_frames<-list()
cue_frames_results<-list()
all_days_cue_frames_results<-list()

precue_frames<-list()
precue_frames_results<-list()
all_days_precue_frames_results<-list()


postcue_frames<-list()
postcue_frames_results<-list()
all_days_postcue_frames_results<-list()



for(y in(1:17)){ #change to number of sheets
  data_1<-data_2999L[,(y+vec_3[y]):(y+vec_4[y])] 
  for(i in 1:length(list_of_cues[[r]][,y])){
    indx<-which(data_1[,1]>list_of_cues[[r]][i,y] & data_1[,1]<list_of_cues[[r]][i,y]+.4)
    mydf<-data_1[(indx-600):(indx+1800),]
    colnames(mydf)<-c("time","x_cord","y_cord","on platform","off platform")
    trial_frame_2999L[[i]]<-mydf
    data<-cbind(mydf[,1],mydf[,4],mydf[,5])
    colnames(data)<-c("time","on platform","off platform")
    data<-as.data.frame(data)
    ex<-rle(data[,2])
    #create empty data frame named results and assign column names 
    results <- data.frame(on_platform_dur=numeric(),
                          off_paltform_dur=numeric(),
                          on_on_timestamp=numeric(),
                          on_off_timestamp=numeric(),
                          off_on_timestamp=numeric(),
                          off_off_timestamp=numeric(),
                          state_no=numeric(),
                          outcome=character()
    )
    if(length(ex$values)==1){
      results[1,3]<-(data['time'][1,1])*data['on platform'][1,1]
      results[1,4]<-(data['time'][nrow(data['time']),1])*data['on platform'][1,1]
      results[1,1]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['on platform'][1,1]
      results[1,5]<-(data['time'][1,1])*data['off platform'][1,1]
      results[1,6]<-(data['time'][nrow(data['time']),1])*data['off platform'][1,1]
      results[1,2]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['off platform'][1,1]
      results['state_no']<-c(1:length(results[,1]))
      results_list[[i]]<-results 
    } else{
      tryCatch({
        vect_1<-c(data[1,1],0,0)
        vect_2<-c(data[nrow(data),1],0,0)
        ifelse(data[1,2]==1,data<-rbind(vect_1,data,vect_2), data<-rbind(vect_1,data,vect_2))
        idx <- which(data[,2] == x[1]) #create which function for col 2 values of data frame y 
        idxl <- which(data[,2] == l[1])#create which function for col 2 values of data frame y 
        a<-idx[sapply(idx, function(z) all(data[z:(z+(length(x)-1)),2] == x))] #apply function to col 2 of data frame y for 0 1#on platform start
        b<-idxl[sapply(idxl, function(z) all(data[z:(z+(length(l)-1)),2] == l))] #apply function to col 2 of data frame y for 1 0 #on platform  end times 
        for (j in 1:max(length(a),length(b))){
          results[j,3]<-data['time'][a[j]+1,1]
          results[j,4]<-data['time'][b[j],1]
          results[j,1]<-data['time'][b[j],1]-data['time'][a[j]+1,1]
        }
        idx <- which(data[,3] == x[1])
        idxl <- which(data[,3] == l[1])
        e<-idx[sapply(idx, function(w) all(data[w:(w+(length(x)-1)),3] == x))] #cue row start times
        f<-idxl[sapply(idxl, function(w) all(data[w:(w+(length(l)-1)),3] == l))] #cue row end times
        for (k in 1:max(length(e),length(f))){
          results[k,5]<-data['time'][e[k]+1,1]
          results[k,6]<-data['time'][f[k],1]
          results[k,2]<-data['time'][f[k],1]-data['time'][e[k]+1,1]
          
        }
        results['state_no']<-c(1:length(results[,1]))
        results_list[[i]]<-results 
      }, error=function(e){cat("ERROR :",conditionMessage(e), "need to recode day", paste(i),"\n")})
    }
    shock_frames<-which(data[,1]>list_of_shocks[[r]][i,y] & data[,1]<list_of_shocks[[r]][i,y]+2)
    data<-data[(first(shock_frames)-1):(last(shock_frames)+1),]
    shock_frames_trial[[i]]<-data
    ex<-rle(data[,2])
    shock_outcome <- data.frame(outcome=character())
    if(length(ex$values)==1 & ex$values==1){
      results[1,8]<-c("avoidance")
      shock_outcome[1,1]<-c("avoidance")
    }else{
      results[1,8]<-c("shocked")
      shock_outcome<-c("shocked")
    }
    #shock_sumary[[i]]<-results #insert list above
    shock_outcome_list[[i]]<-shock_outcome
    
    ######Cue analysis############
    
    cue_frames_indx<-which(data_1[,1]>list_of_cues[[r]][i,y] & data_1[,1]<list_of_cues[[r]][i,y]+20)
    data<-data_1[(first(cue_frames_indx)):(last(cue_frames_indx)),]
    cue_frames[[i]]<-data
    data<-cbind(data[,1],data[,4],data[,5])
    colnames(data)<-c("time","on platform","off platform")
    data<-as.data.frame(data)
    ex<-rle(data[,2])
    #create empty data frame named results and assign column names 
    results_cue_frames <- data.frame(on_platform_dur=numeric(),
                                     off_paltform_dur=numeric(),
                                     on_on_timestamp=numeric(),
                                     on_off_timestamp=numeric(),
                                     off_on_timestamp=numeric(),
                                     off_off_timestamp=numeric(),
                                     state_no=numeric(),
                                     outcome=character()
    )
    if(length(ex$values)==1){
      results_cue_frames[1,3]<-(data['time'][1,1])*data['on platform'][1,1]
      results_cue_frames[1,4]<-(data['time'][nrow(data['time']),1])*data['on platform'][1,1]
      results_cue_frames[1,1]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['on platform'][1,1]
      results_cue_frames[1,5]<-(data['time'][1,1])*data['off platform'][1,1]
      results_cue_frames[1,6]<-(data['time'][nrow(data['time']),1])*data['off platform'][1,1]
      results_cue_frames[1,2]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['off platform'][1,1]
      results_cue_frames['state_no']<-c(1:length(results_cue_frames[,1]))
      cue_frames_results[[i]]<-results_cue_frames 
    } else{
      tryCatch({
        vect_1<-c(data[1,1],0,0)
        vect_2<-c(data[nrow(data),1],0,0)
        ifelse(data[1,2]==1,data<-rbind(vect_1,data,vect_2), data<-rbind(vect_1,data,vect_2))
        idx <- which(data[,2] == x[1]) #create which function for col 2 values of data frame y 
        idxl <- which(data[,2] == l[1])#create which function for col 2 values of data frame y 
        a<-idx[sapply(idx, function(z) all(data[z:(z+(length(x)-1)),2] == x))] #apply function to col 2 of data frame y for 0 1#on platform start
        b<-idxl[sapply(idxl, function(z) all(data[z:(z+(length(l)-1)),2] == l))] #apply function to col 2 of data frame y for 1 0 #on platform  end times 
        for (j in 1:max(length(a),length(b))){
          results_cue_frames[j,3]<-data['time'][a[j]+1,1]
          results_cue_frames[j,4]<-data['time'][b[j],1]
          results_cue_frames[j,1]<-data['time'][b[j],1]-data['time'][a[j]+1,1]
        }
        idx <- which(data[,3] == x[1])
        idxl <- which(data[,3] == l[1])
        e<-idx[sapply(idx, function(w) all(data[w:(w+(length(x)-1)),3] == x))] #cue row start times
        f<-idxl[sapply(idxl, function(w) all(data[w:(w+(length(l)-1)),3] == l))] #cue row end times
        for (k in 1:max(length(e),length(f))){
          results_cue_frames[k,5]<-data['time'][e[k]+1,1]
          results_cue_frames[k,6]<-data['time'][f[k],1]
          results_cue_frames[k,2]<-data['time'][f[k],1]-data['time'][e[k]+1,1]
          
        }
        results_cue_frames['state_no']<-c(1:length(results_cue_frames[,1]))
        cue_frames_results[[i]]<-results_cue_frames 
      }, error=function(e){cat("ERROR :",conditionMessage(e), "need to recode day", paste(i),"\n")})
    }
    
    ####pre cue analysis #########################
    precue_frames_indx<-which(data_1[,1]<list_of_cues[[r]][i,y] & data_1[,1]>list_of_cues[[r]][i,y]-20)
    data<-data_1[(first(precue_frames_indx)):(last(precue_frames_indx)),]
    precue_frames[[i]]<-data
    data<-cbind(data[,1],data[,4],data[,5])
    colnames(data)<-c("time","on platform","off platform")
    data<-as.data.frame(data)
    ex<-rle(data[,2])
    #create empty data frame named results and assign column names 
    results_precue_frames <- data.frame(on_platform_dur=numeric(),
                                        off_paltform_dur=numeric(),
                                        on_on_timestamp=numeric(),
                                        on_off_timestamp=numeric(),
                                        off_on_timestamp=numeric(),
                                        off_off_timestamp=numeric(),
                                        state_no=numeric(),
                                        outcome=character()
    )
    if(length(ex$values)==1){
      results_precue_frames[1,3]<-(data['time'][1,1])*data['on platform'][1,1]
      results_precue_frames[1,4]<-(data['time'][nrow(data['time']),1])*data['on platform'][1,1]
      results_precue_frames[1,1]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['on platform'][1,1]
      results_precue_frames[1,5]<-(data['time'][1,1])*data['off platform'][1,1]
      results_precue_frames[1,6]<-(data['time'][nrow(data['time']),1])*data['off platform'][1,1]
      results_precue_frames[1,2]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['off platform'][1,1]
      results_precue_frames['state_no']<-c(1:length(results_precue_frames[,1]))
      precue_frames_results[[i]]<-results_precue_frames 
    } else{
      tryCatch({
        vect_1<-c(data[1,1],0,0)
        vect_2<-c(data[nrow(data),1],0,0)
        ifelse(data[1,2]==1,data<-rbind(vect_1,data,vect_2), data<-rbind(vect_1,data,vect_2))
        idx <- which(data[,2] == x[1]) #create which function for col 2 values of data frame y 
        idxl <- which(data[,2] == l[1])#create which function for col 2 values of data frame y 
        rm(a)
        rm(b)
        a<-idx[sapply(idx, function(z) all(data[z:(z+(length(x)-1)),2] == x))] #apply function to col 2 of data frame y for 0 1#on platform start
        b<-idxl[sapply(idxl, function(z) all(data[z:(z+(length(l)-1)),2] == l))] #apply function to col 2 of data frame y for 1 0 #on platform  end times 
        for (j in 1:max(length(a),length(b))){
          results_precue_frames[j,3]<-data['time'][a[j],1]
          results_precue_frames[j,4]<-data['time'][b[j],1]
          results_precue_frames[j,1]<-data['time'][b[j],1]-data['time'][a[j],1]
        }
        idx <- which(data[,3] == x[1])
        idxl <- which(data[,3] == l[1])
        rm(e)
        rm(f)
        e<-idx[sapply(idx, function(w) all(data[w:(w+(length(x)-1)),3] == x))] #cue row start times
        f<-idxl[sapply(idxl, function(w) all(data[w:(w+(length(l)-1)),3] == l))] #cue row end times
        for (k in 1:max(length(e),length(f))){
          results_precue_frames[k,5]<-data['time'][e[k],1]
          results_precue_frames[k,6]<-data['time'][f[k],1]
          results_precue_frames[k,2]<-data['time'][f[k],1]-data['time'][e[k],1]
          
        }
        results_precue_frames['state_no']<-c(1:length(results_precue_frames[,1]))
        precue_frames_results[[i]]<-results_precue_frames 
      }, error=function(e){cat("ERROR :",conditionMessage(e), "need to recode day", paste(i),"\n")})
    }
    
    
    ####post cue analysis #########################
    
    postcue_frames_indx<-which(data_1[,1]>list_of_cues[[r]][i,y]+20 & data_1[,1]<list_of_cues[[r]][i,y]+40)
    data<-data_1[(first(postcue_frames_indx)):(last(postcue_frames_indx)),]
    postcue_frames[[i]]<-data
    data<-cbind(data[,1],data[,4],data[,5])
    colnames(data)<-c("time","on platform","off platform")
    data<-as.data.frame(data)
    ex<-rle(data[,2])
    #create empty data frame named results and assign column names 
    results_postcue_frames <- data.frame(on_platform_dur=numeric(),
                                         off_paltform_dur=numeric(),
                                         on_on_timestamp=numeric(),
                                         on_off_timestamp=numeric(),
                                         off_on_timestamp=numeric(),
                                         off_off_timestamp=numeric(),
                                         state_no=numeric(),
                                         outcome=character()
    )
    if(length(ex$values)==1){
      results_postcue_frames[1,3]<-(data['time'][1,1])*data['on platform'][1,1]
      results_postcue_frames[1,4]<-(data['time'][nrow(data['time']),1])*data['on platform'][1,1]
      results_postcue_frames[1,1]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['on platform'][1,1]
      results_postcue_frames[1,5]<-(data['time'][1,1])*data['off platform'][1,1]
      results_postcue_frames[1,6]<-(data['time'][nrow(data['time']),1])*data['off platform'][1,1]
      results_postcue_frames[1,2]<-(data['time'][nrow(data['time']),1]-data['time'][1,1])*data['off platform'][1,1]
      results_postcue_frames['state_no']<-c(1:length(results_postcue_frames[,1]))
      postcue_frames_results[[i]]<-results_postcue_frames 
    } else{
      tryCatch({
        vect_1<-c(data[1,1],0,0)
        vect_2<-c(data[nrow(data),1],0,0)
        ifelse(data[1,2]==1,data<-rbind(vect_1,data,vect_2), data<-rbind(vect_1,data,vect_2))
        idx <- which(data[,2] == x[1]) #create which function for col 2 values of data frame y 
        idxl <- which(data[,2] == l[1])#create which function for col 2 values of data frame y 
        a<-idx[sapply(idx, function(z) all(data[z:(z+(length(x)-1)),2] == x))] #apply function to col 2 of data frame y for 0 1#on platform start
        b<-idxl[sapply(idxl, function(z) all(data[z:(z+(length(l)-1)),2] == l))] #apply function to col 2 of data frame y for 1 0 #on platform  end times 
        for (j in 1:max(length(a),length(b))){
          results_postcue_frames[j,3]<-data['time'][a[j]+1,1]
          results_postcue_frames[j,4]<-data['time'][b[j],1]
          results_postcue_frames[j,1]<-data['time'][b[j],1]-data['time'][a[j]+1,1]
        }
        idx <- which(data[,3] == x[1])
        idxl <- which(data[,3] == l[1])
        e<-idx[sapply(idx, function(w) all(data[w:(w+(length(x)-1)),3] == x))] #cue row start times
        f<-idxl[sapply(idxl, function(w) all(data[w:(w+(length(l)-1)),3] == l))] #cue row end times
        for (k in 1:max(length(e),length(f))){
          results_postcue_frames[k,5]<-data['time'][e[k]+1,1]
          results_postcue_frames[k,6]<-data['time'][f[k],1]
          results_postcue_frames[k,2]<-data['time'][f[k],1]-data['time'][e[k]+1,1]
          
        }
        results_postcue_frames['state_no']<-c(1:length(results_postcue_frames[,1]))
        postcue_frames_results[[i]]<-results_postcue_frames 
      }, error=function(e){cat("ERROR :",conditionMessage(e), "need to recode day", paste(i),"\n")})
    }
    
  }
  all_days_by_trial_2999L[[y]]<-data.frame(do.call(cbind.na, trial_frame_2999L))#******CHANGE BY ANIMAL**************###########
  all_days_by_trial_2999L_summary[[y]]<-data.frame(do.call(cbind.na, results_list))#******CHANGE BY ANIMAL**************###########
  
  all_days_so_list[[y]]<-data.frame(do.call(rbind.na, shock_outcome_list))
  all_days_shock_frames_list[[y]]<-data.frame(do.call(cbind.na, shock_frames_trial))
  so_in_frame<-data.frame(do.call(cbind.na, all_days_so_list))
  
  all_days_cue_frames_results[[y]]<-data.frame(do.call(rbind.na, cue_frames_results))
  cue_in_frame<-data.frame(do.call(cbind.na, all_days_cue_frames_results))
  
  all_days_precue_frames_results[[y]]<-data.frame(do.call(rbind.na, precue_frames_results))
  precue_in_frame<-data.frame(do.call(cbind.na, all_days_precue_frames_results))
  
  all_days_postcue_frames_results[[y]]<-data.frame(do.call(rbind.na, postcue_frames_results))
  postcue_in_frame<-data.frame(do.call(cbind.na, all_days_postcue_frames_results))
  
}





##MOUSE 1 ""C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_1"
write.xlsx(all_days_by_trial_2999L, file=paste(dir,'Mouse_',r,'/all_days_trial.xlsx',sep=""))
write.xlsx(all_days_by_trial_2999L_summary, file=paste(dir,'Mouse_',r,'/AValldays_by_trial_summary.xlsx',sep=""))

write.xlsx(so_in_frame, file=paste(dir,'Mouse_',r,'/shockAV_outcome.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########
write.xlsx(all_days_shock_frames_list, file=paste(dir,'Mouse_',r,'/AVshock_frames_by_trial_summary.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########

write.xlsx(all_days_cue_frames_results, file=paste(dir,'Mouse_',r,'/cue_frames.xlsx',sep=""))
write.xlsx(cue_in_frame, file=paste(dir,'Mouse_1',r,'/cue_oneframe.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########

write.xlsx(all_days_precue_frames_results, file=paste(dir,'Mouse_',r,'/precue_frames.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########
write.xlsx(precue_in_frame, file=paste(dir,'Mouse_', r,'/precue_oneframe.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########

write.xlsx(all_days_postcue_frames_results, file=paste(dir,'Mouse_',r,'/postcue_frames.xlsx')) #******CHANGE BY ANIMAL**************###########
write.xlsx(postcue_in_frame, file=paste(dir, 'Mouse_',r,'/postcue_oneframe.xlsx')) #******CHANGE BY ANIMAL**************###########



