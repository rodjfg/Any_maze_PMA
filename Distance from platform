

library(gdata)
library(readxl)
library(survival)
library(mgcv)
library(nlme)
library(R2HTML)
library(gss)
library(codetools)
library(STAR)
library(openxlsx)
library(gtools)
library(openxlsx)
library(plyr)
library(readr) 
library(devtools)


###############################################################################################################
#RUN FUNCTIONS
###############################################################################################################
cbind.na <- function (..., deparse.level = 1) 
{
  na <- nargs() - (!missing(deparse.level))    
  deparse.level <- as.integer(deparse.level)
  stopifnot(0 <= deparse.level, deparse.level <= 2)
  argl <- list(...)   
  while (na > 0 && is.null(argl[[na]])) {
    argl <- argl[-na]
    na <- na - 1
  }
  if (na == 0) 
    return(NULL)
  if (na == 1) {         
    if (isS4(..1)) 
      return(cbind2(..1))
    else return(matrix(...))  ##.Internal(cbind(deparse.level, ...)))
  }
  if (deparse.level) {       
    symarg <- as.list(sys.call()[-1L])[1L:na]
    Nms <- function(i) {
      if (is.null(r <- names(symarg[i])) || r == "") {
        if (is.symbol(r <- symarg[[i]]) || deparse.level == 
            2) 
          deparse(r)
      }
      else r
    }
  }   
  ## deactivated, otherwise no fill in with two arguments
  if (na == 0) {
    r <- argl[[2]]
    fix.na <- FALSE
  }
  else {
    nrs <- unname(lapply(argl, nrow))
    iV <- sapply(nrs, is.null)
    fix.na <- identical(nrs[(na - 1):na], list(NULL, NULL))
    ## deactivated, otherwise data will be recycled
    #if (fix.na) {
    #    nr <- max(if (all(iV)) sapply(argl, length) else unlist(nrs[!iV]))
    #    argl[[na]] <- cbind(rep(argl[[na]], length.out = nr), 
    #        deparse.level = 0)
    #}       
    if (deparse.level) {
      if (fix.na) 
        fix.na <- !is.null(Nna <- Nms(na))
      if (!is.null(nmi <- names(argl))) 
        iV <- iV & (nmi == "")
      ii <- if (fix.na) 
        2:(na - 1)
      else 2:na
      if (any(iV[ii])) {
        for (i in ii[iV[ii]]) if (!is.null(nmi <- Nms(i))) 
          names(argl)[i] <- nmi
      }
    }
    
    ## filling with NA's to maximum occuring nrows
    nRow <- as.numeric(sapply(argl, function(x) NROW(x)))
    maxRow <- max(nRow, na.rm = TRUE)  
    argl <- lapply(argl, function(x)  if (is.null(nrow(x))) c(x, rep(NA, maxRow - length(x)))
                   else rbind.na(x, matrix(, maxRow - nrow(x), ncol(x))))
    r <- do.call(cbind, c(argl[-1L], list(deparse.level = deparse.level)))
  }
  d2 <- dim(r)
  r <- cbind2(argl[[1]], r)
  if (deparse.level == 0) 
    return(r)
  ism1 <- !is.null(d1 <- dim(..1)) && length(d1) == 2L
  ism2 <- !is.null(d2) && length(d2) == 2L && !fix.na
  if (ism1 && ism2) 
    return(r)
  Ncol <- function(x) {
    d <- dim(x)
    if (length(d) == 2L) 
      d[2L]
    else as.integer(length(x) > 0L)
  }
  nn1 <- !is.null(N1 <- if ((l1 <- Ncol(..1)) && !ism1) Nms(1))
  nn2 <- !is.null(N2 <- if (na == 2 && Ncol(..2) && !ism2) Nms(2))
  if (nn1 || nn2 || fix.na) {
    if (is.null(colnames(r))) 
      colnames(r) <- rep.int("", ncol(r))
    setN <- function(i, nams) colnames(r)[i] <<- if (is.null(nams)) 
      ""
    else nams
    if (nn1) 
      setN(1, N1)
    if (nn2) 
      setN(1 + l1, N2)
    if (fix.na) 
      setN(ncol(r), Nna)
  }
  r
}

rbind.na <- function (..., deparse.level = 1) 
{
  na <- nargs() - (!missing(deparse.level))
  deparse.level <- as.integer(deparse.level)
  stopifnot(0 <= deparse.level, deparse.level <= 2)
  argl <- list(...)
  while (na > 0 && is.null(argl[[na]])) {
    argl <- argl[-na]
    na <- na - 1
  }    
  if (na == 0) 
    return(NULL)
  if (na == 1) {
    if (isS4(..1)) 
      return(rbind2(..1))
    else return(matrix(..., nrow = 1)) ##.Internal(rbind(deparse.level, ...)))
  }
  if (deparse.level) {
    symarg <- as.list(sys.call()[-1L])[1L:na]
    Nms <- function(i) {
      if (is.null(r <- names(symarg[i])) || r == "") {
        if (is.symbol(r <- symarg[[i]]) || deparse.level == 
            2) 
          deparse(r)
      }
      else r
    }
  }
  
  ## deactivated, otherwise no fill in with two arguments
  if (na == 0) {
    r <- argl[[2]]
    fix.na <- FALSE
  }
  else {
    nrs <- unname(lapply(argl, ncol))
    iV <- sapply(nrs, is.null)
    fix.na <- identical(nrs[(na - 1):na], list(NULL, NULL))
    ## deactivated, otherwise data will be recycled
    #if (fix.na) {
    #    nr <- max(if (all(iV)) sapply(argl, length) else unlist(nrs[!iV]))
    #    argl[[na]] <- rbind(rep(argl[[na]], length.out = nr), 
    #        deparse.level = 0)
    #}
    if (deparse.level) {
      if (fix.na) 
        fix.na <- !is.null(Nna <- Nms(na))
      if (!is.null(nmi <- names(argl))) 
        iV <- iV & (nmi == "")
      ii <- if (fix.na) 
        2:(na - 1)
      else 2:na
      if (any(iV[ii])) {
        for (i in ii[iV[ii]]) if (!is.null(nmi <- Nms(i))) 
          names(argl)[i] <- nmi
      }
    }
    
    ## filling with NA's to maximum occuring ncols
    nCol <- as.numeric(sapply(argl, function(x) if (is.null(ncol(x))) length(x)
                              else ncol(x)))
    maxCol <- max(nCol, na.rm = TRUE)  
    argl <- lapply(argl, function(x)  if (is.null(ncol(x))) c(x, rep(NA, maxCol - length(x)))
                   else cbind(x, matrix(, nrow(x), maxCol - ncol(x))))  
    
    ## create a common name vector from the
    ## column names of all 'argl' items
    namesVEC <- rep(NA, maxCol)  
    for (i in 1:length(argl)) {
      CN <- colnames(argl[[i]])          
      m <- !(CN %in% namesVEC)
      namesVEC[m] <- CN[m]          
    }  
    
    ## make all column names from common 'namesVEC'
    for (j in 1:length(argl)) {    
      if (!is.null(ncol(argl[[j]]))) colnames(argl[[j]]) <- namesVEC
    }
    
    r <- do.call(rbind, c(argl[-1L], list(deparse.level = deparse.level)))        
  }
  
  d2 <- dim(r)
  
  ## make all column names from common 'namesVEC'
  colnames(r) <- colnames(argl[[1]])
  
  r <- rbind2(argl[[1]], r)
  
  if (deparse.level == 0) 
    return(r)
  ism1 <- !is.null(d1 <- dim(..1)) && length(d1) == 2L
  ism2 <- !is.null(d2) && length(d2) == 2L && !fix.na
  if (ism1 && ism2) 
    return(r)
  Nrow <- function(x) {
    d <- dim(x)
    if (length(d) == 2L) 
      d[1L]
    else as.integer(length(x) > 0L)
  }
  nn1 <- !is.null(N1 <- if ((l1 <- Nrow(..1)) && !ism1) Nms(1))
  nn2 <- !is.null(N2 <- if (na == 2 && Nrow(..2) && !ism2) Nms(2))
  if (nn1 || nn2 || fix.na) {
    if (is.null(rownames(r))) 
      rownames(r) <- rep.int("", nrow(r))
    setN <- function(i, nams) rownames(r)[i] <<- if (is.null(nams)) 
      ""
    else nams
    if (nn1) 
      setN(1, N1)
    if (nn2) 
      setN(1 + l1, N2)
    if (fix.na) 
      setN(nrow(r), Nna)
  }
  r
}



# load excel workbook
excel <- loadWorkbook('C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/P_TONE_CUE.xlsx') # change to match your path
# get sheet names
sheet_names <- names(excel)
names(sheet_names) <- sheet_names
# put sheets into a list of data frames
sheet_list <- lapply(sheet_names, function(.sheet){readWorkbook(excel, .sheet)})
# limit sheet_list to sheets with at least 1 dimension 
sheet_list2 <- sheet_list[sapply(sheet_list, function(x) dim(x)[1]) > 0]

df1<-as.data.frame(sheet_list2[[1]])
col_names<-df1[1,3:20]
rownames<-seq(1:20)

list_of_cues<-list()
for (i in 1:length(sheet_list)){
  df1<-as.data.frame(sheet_list2[[i]])
  df1<-df1[,3:20]
  df1<-df1[-(1:3),]
  df1<-df1[1:20,]
  # defining data in the vector 
  x<-as.numeric(as.matrix(df1))
  # creating matrix 
  length(x)
  m <- matrix(x, nrow = 20, byrow = FALSE,  
              dimnames = list(rownames, col_names)) 
  
  list_of_cues[[i]]<-m
}

list_of_shocks<-list()
for (i in 1:length(sheet_list)){
  df1<-as.data.frame(sheet_list2[[i]])
  df1<-df1[,3:20]
  df1<-df1[-(1:3),]
  df1<-df1[1:20,]
  # defining data in the vector 
  x<-as.numeric(as.matrix(df1))
  # creating matrix 
  length(x)
  m <- matrix(x, nrow = 20, byrow = FALSE,  
              dimnames = list(rownames, col_names)) 
  m<-m+28
  list_of_shocks[[i]]<-m
}
#mouse_1-12
mydir[1] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_1"      #******CHANGE BY ANIMAL**************###########

mydir[2] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_2"      #******CHANGE BY ANIMAL**************###########

mydir[3] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_3"      #******CHANGE BY ANIMAL**************###########

mydir[4] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_4"      #******CHANGE BY ANIMAL**************###########

mydir[5] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_5"      #******CHANGE BY ANIMAL**************###########

mydir[6] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_6"      #******CHANGE BY ANIMAL**************###########

mydir[7] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_7"      #******CHANGE BY ANIMAL**************###########

mydir[8] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_8"      #******CHANGE BY ANIMAL**************###########

mydir[9] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_9"      #******CHANGE BY ANIMAL**************###########

mydir[10] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_10"      #******CHANGE BY ANIMAL**************###########

mydir[11] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_11"      #******CHANGE BY ANIMAL**************###########

mydir[12] = "C:/Users/floresgarciarj/Documents/Anymaze Sucrose Cohort/Naive Sucrose Cohort/Avoidance/Mouse_12"      #******CHANGE BY ANIMAL**************###########

#mouse
r=1

####################folder containing your data###############################

myfiles = list.files(path=mydir[r], pattern="*.csv", full.names=TRUE)
myfiles<-mixedsort(myfiles)

dat<-list()
for(i in 1:length(myfiles)){
  dat_csv = ldply(myfiles[i], read_csv)
  dat[[i]]<-as.data.frame(dat_csv)
  dat[[i]]<-as.data.frame(cbind(dat[[i]][1], dat[[i]][2],dat[[i]][3], dat[[i]][4], dat[[i]][5])) #4 is in platform #5 off platform #1 is time
  colnames(dat[[i]])<-c("time","x_cord","y_cord","on platform","off platform")
  head(dat[[i]])
}

data_2999L<-(do.call(cbind.na, dat))  #******CHANGE BY ANIMAL**************###########


vec_3<-c(0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68)
vec_4<-c(4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72)


bin<- 1
bin_size<- 30*bin
dist_binned<-list()
all_days_binned_dist<-list()
trial_frame_2999L<-list()
all_days_by_trial_2999L<-list() #list for days 20 trials per day

#Y is days
for(y in(1:18)){
  data_1<-data_2999L[,(y+vec_3[y]):(y+vec_4[y])] 
  #i is cue i of 20 cues of y day of y days
  #r is mouse r 
  #X-mean
  product_x<-data_1[,2]*data_1[,4]
  product_x<-product_x[!is.na(product_x) & product_x>0]
  mean_x_on_platform<-sum(product_x)/length(product_x)
  #Y-mean
  product_y<-data_1[,3]*data_1[,4]
  product_y<-product_y[!is.na(product_y) & product_y>0]
  mean_y_on_platform<-sum(product_y)/length(product_y)

for(i in 1:length(list_of_cues[[r]][,y])){
    indx<-which(data_1[,1]>list_of_cues[[r]][i,y] & data_1[,1]<list_of_cues[[r]][i,y]+.4)
    mydf<-data_1[(indx-600):(indx+1200),c(1:5)]
    
    
  #x-cord
    if(is.na(sum(mydf[,2]))){
    missing<-which(is.na(mydf[,2]))
    not_missing<-which(!is.na(mydf[,2]))
    for(mi in 1:length(which(is.na(mydf[,2])))){
      one<-not_missing[missing[mi]>not_missing]
      two<-not_missing[missing[mi]<not_missing]
      average<-mean(c(mydf[last(one),2],mydf[first(two),2]))
      mydf[missing[mi],2]<-average 
    }
  }
  #y-cord
    if(is.na(sum(mydf[,3]))){
    missing<-which(is.na(mydf[,3]))
    not_missing<-which(!is.na(mydf[,3]))
    for(mii in 1:length(which(is.na(mydf[,3])))){
      one<-not_missing[missing[mii]>not_missing]
      two<-not_missing[missing[mii]<not_missing]
      average<-mean(c(mydf[last(one),3],mydf[first(two),3]))
      mydf[missing[mii],3]<-average 
      }
    }
    
    vec_mean_xp<-rep(mean_x_on_platform,(length(mydf[,2])))
    vec_mean_yp<-rep(mean_y_on_platform,(length(mydf[,3])))

    distance<- sqrt((mydf[,2]-vec_mean_xp)^2 + (mydf[,3]-vec_mean_yp)^2)
    
    names(distance)<-c("distance")
    mydf<-cbind(mydf,distance)
    binned_dist_frame<-data.frame()
    for(el in 0:(round(length(mydf[,1])/bin_size)-1)){
      val<-mydf[(bin_size*el):(bin_size*(el+1)),]
      dist_binned_ave<-mean(val[,6])
      binned_dist_frame<-rbind(binned_dist_frame,dist_binned_ave)
  }
    dist_binned[[i]]<-binned_dist_frame
    trial_frame_2999L[[i]]<-mydf

}
all_days_by_trial_2999L[[y]]<-data.frame(do.call(cbind.na, trial_frame_2999L))
all_days_binned_dist[[y]]<-data.frame(do.call(cbind.na, dist_binned))
}


names<-seq(1:20)
for (i in 1:18){
  colnames(all_days_binned_dist[[i]])<-names
  
}

#alldays only
write.xlsx(all_days_by_trial_2999L, file=paste(mydir[r],'/All_days_distance_other_measure_m',r,'.xlsx',sep="")) #******CHANGE BY ANIMAL**************###########

#distance only
write.xlsx(all_days_binned_dist, file=paste(mydir[r],'/distance_only_mouse',r,'.xlsx', sep="")) #******CHANGE BY ANIMAL**************###########
